#include <bits/stdc++.h>
using namespace std;

void countSort(int a[], int n, int div)
{
    int freq[10];
    memset(freq, 0, sizeof(freq));

    for(int i=0;i<n;i++)
        freq[(a[i]/div)%10]++;

    for(int i=1;i<10;i++)
        freq[i] =(freq[i] + freq[i-1]);

    int temp[n];
    for(int i = n - 1; i >= 0; i--)
    {
        temp[freq[(a[i]/div)%10]-1]=a[i];
        freq[(a[i]/div)%10]--;
    }
    for(int i=0;i<n;i++)
        a[i]=temp[i];
    return;
}

void radixSort(int a[], int n)
{
    int maxx = a[0];
    for(int i=0;i<n;i++)
        maxx=max(maxx, a[i]);

    for(int i=1;maxx/i>0;i*=10)
        countSort(a, n, i);
}

void print(int a[], int n)
{
    for(int i=0;i<n;i++)
        cout<<a[i]<<" ";
    cout<<endl;
    return;
}
int main()
{
    int a[] = {21,   10,  17,  34,  44,  11,  654,  23,  957,  89};
    int n = sizeof(a)/sizeof(a[0]);

    radixSort(a,n);
    print(a, n);
    return 0;
}
/////////////////////////////////////
#include <bits/stdc++.h>
using namespace std;

int mat[4][5] =   {{-1, -9, 0, -1, 0},
                   {-8,-3, -2, 9, -7},
                   {2, 0, 0, -6, 0},
                   {0, -7, -3, 5, -4}};


int dx[4] = {1, 0, -1, 0 };
int dy[4] = {0, 1, 0, -1 };

bool isValid(int x, int y)
{
    if(x>3 || x<0)
        return false;
     if(y>4 || y<0)
        return false;
    if(mat[x][y] < 0)
    {
        return true;
    }
    else
        return false;
}
struct coord{
    int x;
    int y;
};

struct queuee
{
    int front;
    int rear;
    struct coord elements[500];
    int size;

    queuee()
    {
        front = -1;
        rear = -1;
        size = 50;
    }
    queuee(int n)
    {
        front = -1;
        rear = -1;
        size = n;
    }
    bool isEmpty()
    {
        if(front == -1)
            return true;
        return false;
    }
    bool isFull()
    {
        if( (rear+1)%size == front )
            return true;
        return false;
    }
    void enqueue(struct coord x)
    {
        if(isFull())
            cout<<"Queue is full"<<endl;
        else
        {
            rear = (rear+1)%size;
            elements[rear] = x;
            if(front == -1)
                front = rear;
        }
        return;
    }
    struct coord dequeue()
    {
        struct coord temp;
        if(isEmpty())
        {
            cout<<"Queue is empty"<<endl;
            return temp;
        }
        struct coord data = elements[front];
        if(front == rear)
            front = rear = -1;
        else
            front = (front+1)%size;
        return data;
    }
    int getSize()
    {
        if(front==-1)
            return 0;
        return (rear - front + size )%size +1;
    }
};

void print()
{
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<5;j++)
            cout<<setw(2)<<mat[i][j]<<" ";
        cout<<endl;
    }
}
int solve(struct queuee &q)
{
    struct coord pos, temp;
    int count=0;
    bool flag=true;
    while(!q.isEmpty())
    {
        int n = q.getSize();
        flag=true;
        while(n--)
        {
            temp = q.dequeue();
            for(int i=0;i<4;i++)
            {
                if(isValid(temp.x+dx[i], temp.y+dy[i]))
                {
                    pos.x = temp.x+dx[i];
                    pos.y = temp.y+dy[i];
                    mat[pos.x][pos.y] *= (-1);
                    q.enqueue(pos);

                    if(flag)
                    {
                        count++;
                        flag=false;
                    }
                }
            }
        }
    }
    return count;
}
int main()
{
    struct queuee q(40);
    struct coord pos, temp;
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<5;j++)
        {
            if(mat[i][j]>0)
            {
                temp.x = i;
                temp.y = j;
                q.enqueue(temp);
            }
        }
    }
    cout<<solve(q);
    return 0;
}


